{% extends 'base.twig' %}



{% block content %}

    <p>This (short) tutorial concerns Dingux development, from a Linux (on Intel) platform. First we go through the installation of the toolchain (the cross compiler and all the stuff that goes along), and then an example of compilation.
    </p>
    <p>Note: I use mostly the command line, but you can of course use equivalent graphical tools if you prefer.
    </p>
    <p><br />
    </p>
    <table id="toc" class="toc">
        <tr>
            <td>
                <div id="toctitle">
                    <h2>Contents</h2>
                </div>
                <ul>
                    <li class="toclevel-1 tocsection-1"><a href="#Installing_the_toolchain"><span class="tocnumber">1</span> <span class="toctext">Installing the toolchain</span></a></li>
                    <li class="toclevel-1 tocsection-2"><a href="#Using_the_toolchain"><span class="tocnumber">2</span> <span class="toctext">Using the toolchain</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-3"><a href="#Hello_Dingoo"><span class="tocnumber">2.1</span> <span class="toctext">Hello Dingoo</span></a></li>
                            <li class="toclevel-2 tocsection-4"><a href="#Notes"><span class="tocnumber">2.2</span> <span class="toctext">Notes</span></a></li>
                            <li class="toclevel-2 tocsection-5"><a href="#Problems"><span class="tocnumber">2.3</span> <span class="toctext">Problems</span></a></li>
                        </ul>
                    </li>
                </ul>
            </td>
        </tr>
    </table>
    <script>
        if (window.showTocToggle) {
            var tocShowText = "show";
            var tocHideText = "hide";
            showTocToggle();
        }
    </script>
    <h1> <span class="mw-headline" id="Installing_the_toolchain"> Installing the toolchain </span></h1>
    <ul>
        <li> Grab the latest dingux_toolchain from the <a href="http://code.google.com/p/dingoo-linux/downloads/list" class="external text" rel="nofollow">Dingoo-Linux download page</a>.
        </li>
        <li> Extract it:
        </li>
    </ul>
    <pre>
 tar -jxvf dingux_toolchain_20091022.tar.bz2
</pre>
    <ul>
        <li> Copy the extracted folder to /opt:
        </li>
    </ul>
    <pre>
 sudo cp -r mipsel-linux-uclibc /opt/
</pre>
    <ul>
        <li> Add /opt/mipsel-linux-uclibc/usr/bin to your path:
        </li>
    </ul>
    <pre>
 export PATH=&quot;${PATH}:/opt/mipsel-linux-uclibc/usr/bin/&quot;
</pre>
    <p>(you might want to add this line to your shell's config file so that you don't have to retype it every time you open a new terminal. For instance if you use bash, add it at the end of .bashrc in your home folder) And we're done. Now let's check that it works.
    </p>
    <h1> <span class="mw-headline" id="Using_the_toolchain"> Using the toolchain </span></h1>
    <p>We use the cross-compiler exactly as we would use the regular GCC, except that instead of invoking gcc, g++, ld, etc., we use mipsel-linux-gcc, mipsel-linux-g++, mipsel-linux-ld, etc.
    </p>
    <p>If using a makefile, you can for instance put
    </p>
    <pre>

 CC = mipsel-linux-gcc
 CXX = mipsel-linux-g++
</pre>
    <p>in the beginning.
    </p>
    <p>Or when porting existing software that use the configure script:
    </p>
    <pre>

 ./configure --host=mipsel-linux --target=mipsel-linux
</pre>
    <p><br />
    </p>
    <h2> <span class="mw-headline" id="Hello_Dingoo"> Hello Dingoo </span></h2>
    <p>Let's check that the toolchain works, with the traditionnal 'Hello World' program.
    </p>
    <ul>
        <li> Open your favorite text editor, create a file hello.c, and type in it:
        </li>
    </ul>
    <pre>
 #include &lt;stdio.h&gt;

 int main(void)
 {
	printf(&quot;Hello Dingoo\n&quot;);
 	return 0;
 }
</pre>
    <ul>
        <li> Compile it using the newly installed crosscompiler:
        </li>
    </ul>
    <pre>
 mipsel-linux-gcc -o hello hello.c
</pre>
    <ul>
        <li> Place the binary on the Dingoo. When it is plugged in USB, you can connect by FTP to 10.1.0.2, username "root" and no password. Otherwise, you can always transfer it manually on the MiniSD card.
        </li>
    </ul>
    <pre>
 tenoch@rikiki:~/Dingoo/hello$ ftp 10.1.0.2
 Connected to 10.1.0.2.
 220 Operation successful
 Name (10.1.0.2:tenoch): root
 230 Operation successful
 Remote system type is UNIX.
 Using binary mode to transfer files.
 ftp&gt; cd local 250 Operation successful
 ftp&gt; put hello
 local: hello remote: hello
 200 Operation successful
 150 Ok to send data
 226 Operation successful
 5767 bytes sent in 0.00 secs (46162.6 kB/s)
 ftp&gt; exit 221 Operation successful
</pre>
    <ul>
        <li> Now we have two choices to launch the exe, either remotely, from our computer, or directly on the Dingoo. For the first one, we connect to the Dingoo via telnet, change to the directory where we put the exe, and run it:
        </li>
    </ul>
    <pre>
 tenoch@rikiki:~/Dingoo/hello$ telnet 10.1.0.2
 Trying 10.1.0.2... Connected to 10.1.0.2.
 Escape character is '^]'.
 / # cd usr/local/
 /boot/local # ./hello
 Hello Dingoo
</pre>
    <p>Success!
    </p>
    <p>Second choice: from the Dingoo's interface with gmenu2x, go to the tab "Applications", select "Explorer", navigate to "hello" and launch it. The screen will flash to the terminal, and if you're fast enough, you can read "Hello Dingoo" at the bottom before gmenu2x comes back. To check that, go to the tab "Settings" and choose "Terminal". It will display for 5 seconds the last things written to the standard output.
    </p>
    <h2> <span class="mw-headline" id="Notes"> Notes </span></h2>
    <p>The convention is apparently to use the ".dge" file extention for Dingux executables, but it is not necessary. gmenu2x might rely on this when doing automatic scanning, though (to check&nbsp;?).
    </p>
    <p><br />
    </p>
    <h2> <span class="mw-headline" id="Problems"> Problems </span></h2>
    <ul>
        <li> If you're using Linux and the telnet fails with timeout error, check if your kernel loaded the cdc_ether/usbnet drivers:
        </li>
    </ul>
    <pre>
lsmod | grep -i cdc_ether
</pre>
    <ul>
        <li> If the output of this command returns nothing, you have to compile/install the module by hand, or try to use a fresh kernel of a distribution like Ubuntu.
        </li>
    </ul>




{% endblock %}
