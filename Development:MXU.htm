<!doctype html>
<html>

<head>
    <title>Development:MXU</title>
</head>

<body>
    <p>MXU is the name for the XBurst SIMD instructions. <a href="http://en.wikipedia.org/wiki/SIMD" class="external text" rel="nofollow">SIMD</a> means Single Instruction Multiple Data and is often used to speed up audio/video processing. Examples of SIMD instruction sets for other CPUs are MMX, SSE and AltiVec.
    </p>
    <table id="toc" class="toc">
        <tr>
            <td>
                <div id="toctitle">
                    <h2>Contents</h2>
                </div>
                <ul>
                    <li class="toclevel-1 tocsection-1"><a href="#Instruction_Naming"><span class="tocnumber">1</span> <span class="toctext">Instruction Naming</span></a></li>
                    <li class="toclevel-1 tocsection-2"><a href="#Register_Naming"><span class="tocnumber">2</span> <span class="toctext">Register Naming</span></a></li>
                    <li class="toclevel-1 tocsection-3"><a href="#Enabling_MXU"><span class="tocnumber">3</span> <span class="toctext">Enabling MXU</span></a></li>
                    <li class="toclevel-1 tocsection-4"><a href="#Load_and_Store_Instructions"><span class="tocnumber">4</span> <span class="toctext">Load and Store Instructions</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-5"><a href="#S32I2M"><span class="tocnumber">4.1</span> <span class="toctext">S32I2M</span></a></li>
                            <li class="toclevel-2 tocsection-6"><a href="#S32M2I"><span class="tocnumber">4.2</span> <span class="toctext">S32M2I</span></a></li>
                            <li class="toclevel-2 tocsection-7"><a href="#S32LDD"><span class="tocnumber">4.3</span> <span class="toctext">S32LDD</span></a></li>
                            <li class="toclevel-2 tocsection-8"><a href="#S32LDDV"><span class="tocnumber">4.4</span> <span class="toctext">S32LDDV</span></a></li>
                            <li class="toclevel-2 tocsection-9"><a href="#S32LDI"><span class="tocnumber">4.5</span> <span class="toctext">S32LDI</span></a></li>
                            <li class="toclevel-2 tocsection-10"><a href="#S32LDIV"><span class="tocnumber">4.6</span> <span class="toctext">S32LDIV</span></a></li>
                            <li class="toclevel-2 tocsection-11"><a href="#S32STD"><span class="tocnumber">4.7</span> <span class="toctext">S32STD</span></a></li>
                            <li class="toclevel-2 tocsection-12"><a href="#S32STDV"><span class="tocnumber">4.8</span> <span class="toctext">S32STDV</span></a></li>
                            <li class="toclevel-2 tocsection-13"><a href="#S32SDI"><span class="tocnumber">4.9</span> <span class="toctext">S32SDI</span></a></li>
                            <li class="toclevel-2 tocsection-14"><a href="#S32SDIV"><span class="tocnumber">4.10</span> <span class="toctext">S32SDIV</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-15"><a href="#Addition_and_Subtraction_Instructions"><span class="tocnumber">5</span> <span class="toctext">Addition and Subtraction Instructions</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-16"><a href="#D32ADD.2C_Q16ADD"><span class="tocnumber">5.1</span> <span class="toctext">D32ADD, Q16ADD</span></a></li>
                            <li class="toclevel-2 tocsection-17"><a href="#D32ACC.2C_Q16ACC"><span class="tocnumber">5.2</span> <span class="toctext">D32ACC, Q16ACC</span></a></li>
                            <li class="toclevel-2 tocsection-18"><a href="#Q8ADD"><span class="tocnumber">5.3</span> <span class="toctext">Q8ADD</span></a></li>
                            <li class="toclevel-2 tocsection-19"><a href="#Q8ADDE"><span class="tocnumber">5.4</span> <span class="toctext">Q8ADDE</span></a></li>
                            <li class="toclevel-2 tocsection-20"><a href="#Q8ACCE"><span class="tocnumber">5.5</span> <span class="toctext">Q8ACCE</span></a></li>
                            <li class="toclevel-2 tocsection-21"><a href="#D16AVG.2C_Q8AVG"><span class="tocnumber">5.6</span> <span class="toctext">D16AVG, Q8AVG</span></a></li>
                            <li class="toclevel-2 tocsection-22"><a href="#D16AVGR.2C_Q8AVGR"><span class="tocnumber">5.7</span> <span class="toctext">D16AVGR, Q8AVGR</span></a></li>
                            <li class="toclevel-2 tocsection-23"><a href="#Q8SAD"><span class="tocnumber">5.8</span> <span class="toctext">Q8SAD</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-24"><a href="#Multiply_Instructions"><span class="tocnumber">6</span> <span class="toctext">Multiply Instructions</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-25"><a href="#D16MUL.2C_Q8MUL"><span class="tocnumber">6.1</span> <span class="toctext">D16MUL, Q8MUL</span></a></li>
                            <li class="toclevel-2 tocsection-26"><a href="#D16MAC.2C_Q8MAC"><span class="tocnumber">6.2</span> <span class="toctext">D16MAC, Q8MAC</span></a></li>
                            <li class="toclevel-2 tocsection-27"><a href="#D16MADL.2C_Q8MADL"><span class="tocnumber">6.3</span> <span class="toctext">D16MADL, Q8MADL</span></a></li>
                            <li class="toclevel-2 tocsection-28"><a href="#D16MULF"><span class="tocnumber">6.4</span> <span class="toctext">D16MULF</span></a></li>
                            <li class="toclevel-2 tocsection-29"><a href="#D16MACF"><span class="tocnumber">6.5</span> <span class="toctext">D16MACF</span></a></li>
                            <li class="toclevel-2 tocsection-30"><a href="#S16MAD"><span class="tocnumber">6.6</span> <span class="toctext">S16MAD</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-31"><a href="#Other_Math"><span class="tocnumber">7</span> <span class="toctext">Other Math</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-32"><a href="#S32MAX.2C_D16MAX.2C_Q8MAX"><span class="tocnumber">7.1</span> <span class="toctext">S32MAX, D16MAX, Q8MAX</span></a></li>
                            <li class="toclevel-2 tocsection-33"><a href="#S32MIN.2C_D16MIN.2C_Q8MIN"><span class="tocnumber">7.2</span> <span class="toctext">S32MIN, D16MIN, Q8MIN</span></a></li>
                            <li class="toclevel-2 tocsection-34"><a href="#Q16SAT"><span class="tocnumber">7.3</span> <span class="toctext">Q16SAT</span></a></li>
                            <li class="toclevel-2 tocsection-35"><a href="#S32CPS.2C_D16CPS"><span class="tocnumber">7.4</span> <span class="toctext">S32CPS, D16CPS</span></a></li>
                            <li class="toclevel-2 tocsection-36"><a href="#Q8ABD"><span class="tocnumber">7.5</span> <span class="toctext">Q8ABD</span></a></li>
                            <li class="toclevel-2 tocsection-37"><a href="#Q8SLT"><span class="tocnumber">7.6</span> <span class="toctext">Q8SLT</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-38"><a href="#Shift_and_Shuffle_Instructions"><span class="tocnumber">8</span> <span class="toctext">Shift and Shuffle Instructions</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-39"><a href="#D32SLL"><span class="tocnumber">8.1</span> <span class="toctext">D32SLL</span></a></li>
                            <li class="toclevel-2 tocsection-40"><a href="#D32SLLV"><span class="tocnumber">8.2</span> <span class="toctext">D32SLLV</span></a></li>
                            <li class="toclevel-2 tocsection-41"><a href="#D32SLR"><span class="tocnumber">8.3</span> <span class="toctext">D32SLR</span></a></li>
                            <li class="toclevel-2 tocsection-42"><a href="#D32SLRV"><span class="tocnumber">8.4</span> <span class="toctext">D32SLRV</span></a></li>
                            <li class="toclevel-2 tocsection-43"><a href="#D32SAR"><span class="tocnumber">8.5</span> <span class="toctext">D32SAR</span></a></li>
                            <li class="toclevel-2 tocsection-44"><a href="#D32SARV"><span class="tocnumber">8.6</span> <span class="toctext">D32SARV</span></a></li>
                            <li class="toclevel-2 tocsection-45"><a href="#D32SARL"><span class="tocnumber">8.7</span> <span class="toctext">D32SARL</span></a></li>
                            <li class="toclevel-2 tocsection-46"><a href="#D32SARW"><span class="tocnumber">8.8</span> <span class="toctext">D32SARW</span></a></li>
                            <li class="toclevel-2 tocsection-47"><a href="#Q16SLL"><span class="tocnumber">8.9</span> <span class="toctext">Q16SLL</span></a></li>
                            <li class="toclevel-2 tocsection-48"><a href="#Q16SLLV"><span class="tocnumber">8.10</span> <span class="toctext">Q16SLLV</span></a></li>
                            <li class="toclevel-2 tocsection-49"><a href="#Q16SLR"><span class="tocnumber">8.11</span> <span class="toctext">Q16SLR</span></a></li>
                            <li class="toclevel-2 tocsection-50"><a href="#Q16SLRV"><span class="tocnumber">8.12</span> <span class="toctext">Q16SLRV</span></a></li>
                            <li class="toclevel-2 tocsection-51"><a href="#Q16SAR"><span class="tocnumber">8.13</span> <span class="toctext">Q16SAR</span></a></li>
                            <li class="toclevel-2 tocsection-52"><a href="#Q16SARV"><span class="tocnumber">8.14</span> <span class="toctext">Q16SARV</span></a></li>
                            <li class="toclevel-2 tocsection-53"><a href="#S32ALN"><span class="tocnumber">8.15</span> <span class="toctext">S32ALN</span></a></li>
                            <li class="toclevel-2 tocsection-54"><a href="#S32SFL"><span class="tocnumber">8.16</span> <span class="toctext">S32SFL</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-55"><a href="#New_instructions_in_JZ4770"><span class="tocnumber">9</span> <span class="toctext">New instructions in JZ4770</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-56"><a href="#Load_and_store_instructions_2"><span class="tocnumber">9.1</span> <span class="toctext">Load and store instructions</span></a></li>
                            <li class="toclevel-2 tocsection-57"><a href="#Other_math_2"><span class="tocnumber">9.2</span> <span class="toctext">Other math</span></a></li>
                            <li class="toclevel-2 tocsection-58"><a href="#Addition_and_subtraction_instructions_2"><span class="tocnumber">9.3</span> <span class="toctext">Addition and subtraction instructions</span></a></li>
                            <li class="toclevel-2 tocsection-59"><a href="#Multiply_instructions_2"><span class="tocnumber">9.4</span> <span class="toctext">Multiply instructions</span></a></li>
                            <li class="toclevel-2 tocsection-60"><a href="#Bitwise_instructions"><span class="tocnumber">9.5</span> <span class="toctext">Bitwise instructions</span></a></li>
                        </ul>
                    </li>
                </ul>
            </td>
        </tr>
    </table>
    <script>
        if (window.showTocToggle) {
            var tocShowText = "show";
            var tocHideText = "hide";
            showTocToggle();
        }
    </script>
    <h1> <span class="mw-headline" id="Instruction_Naming"> Instruction Naming </span></h1>
    <p>The initial letter indicates the number of elements in the vector(s) operated upon: S(ingle) for 1, D(ual) for 2, Q(uad) for 4. The letter is followed by a number, which denotes the length of the input elements in bits. The number is followed by the name of the operation that will be performed.
    </p>
    <h1> <span class="mw-headline" id="Register_Naming"> Register Naming </span></h1>
    <p>There is a dedicated register set for the MXU operations. It contains 17 32-bit registers which will be referred to as <code>xr0</code>..<code>xr16</code>. Registers <code>xr0</code>..<code>xr15</code> are used in computations, <code>xr16</code> is a control register. MXU register <code>xr0</code> always has value 0; writes to it have no effect.
    </p>
    <p>The main MIPS registers will be referred to as <code>r0</code>..<code>r31</code>.
    </p>
    <h1> <span class="mw-headline" id="Enabling_MXU"> Enabling MXU </span></h1>
    <p>Before the MXU can be used, it must be enabled. This is done by setting bit 0 (the lowest bit) of <code>xr16</code> to 1.
    </p>
    <h1> <span class="mw-headline" id="Load_and_Store_Instructions"> Load and Store Instructions </span></h1>
    <h2> <span class="mw-headline" id="S32I2M"> S32I2M </span></h2>
    <p><code>S32I2M xr, r</code>
    </p>
    <p>Assigns the value of main register <code>r</code> to MXU register <code>xr</code>.
    </p>
    <h2> <span class="mw-headline" id="S32M2I"> S32M2I </span></h2>
    <p><code>S32M2I xr, r</code>
    </p>
    <p>Assigns the value of MXU register <code>xr</code> to main register <code>r</code>.
    </p>
    <h2> <span class="mw-headline" id="S32LDD"> S32LDD </span></h2>
    <p><code>S32LDD xr, p, o</code>
    </p>
    <p>Loads the contents of the memory at <code>p + o</code> (pointer + offset) into MXU register <code>xr</code>.
    </p>
    <h2> <span class="mw-headline" id="S32LDDV"> S32LDDV </span></h2>
    <p><code>S32LDDV xr, p, o, s</code>
    </p>
    <p>Loads the contents of the memory at <code>p + o * 2<sup>s</sup></code> (pointer + shifted offset) into MXU register <code>xr</code>.
    </p>
    <h2> <span class="mw-headline" id="S32LDI"> S32LDI </span></h2>
    <p><code>S32LDI xr, p, o</code>
    </p>
    <p>Loads the contents of the memory at <code>p + o</code> (pointer + offset) into MXU register <code>xr</code>. After that, <code>p</code> is incremented by <code>o</code>.
    </p>
    <h2> <span class="mw-headline" id="S32LDIV"> S32LDIV </span></h2>
    <p><code>S32LDIV xr, p, o, s</code>
    </p>
    <p>Loads the contents of the memory at <code>p + o * 2<sup>s</sup></code> (pointer + shifted offset) into MXU register <code>xr</code>. After that, <code>p</code> is incremented by <code>o * 2<sup>s</sup></code>.
    </p>
    <h2> <span class="mw-headline" id="S32STD"> S32STD </span></h2>
    <p><code>S32STD xr, p, o</code>
    </p>
    <p>Stores the contents of MXU register <code>xr</code> into the memory at <code>p + o</code> (pointer + offset).
    </p>
    <h2> <span class="mw-headline" id="S32STDV"> S32STDV </span></h2>
    <p><code>S32STDV xr, p, o, s</code>
    </p>
    <p>Stores the contents of MXU register <code>xr</code> into the memory at <code>p + o * 2<sup>s</sup></code> (pointer + shifted offset).
    </p>
    <h2> <span class="mw-headline" id="S32SDI"> S32SDI </span></h2>
    <p><code>S32SDI xr, p, o</code>
    </p>
    <p>Stores the contents of MXU register <code>xr</code> into the memory at <code>p + o</code> (pointer + offset). After that, <code>p</code> is incremented by <code>o</code>.
    </p>
    <h2> <span class="mw-headline" id="S32SDIV"> S32SDIV </span></h2>
    <p><code>S32SDIV xr, p, o, s</code>
    </p>
    <p>Stores the contents of MXU register <code>xr</code> into the memory at <code>p + o * 2<sup>s</sup></code> (pointer + shifted offset). After that, <code>p</code> is incremented by <code>o * 2<sup>s</sup></code>.
    </p>
    <h1> <span class="mw-headline" id="Addition_and_Subtraction_Instructions"> Addition and Subtraction Instructions </span></h1>
    <h2> <span class="mw-headline" id="D32ADD.2C_Q16ADD"> D32ADD, Q16ADD </span></h2>
    <p><code>D32ADD xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p><code>Q16ADD xra, xrb, xrc, xrd, addsub, swizzle</code>
    </p>
    <p>Performs addition and/or subtraction on vectors <code>xrb</code> and <code>xrc</code> and writes the results to vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb + xrc;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb + xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb + xrc;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb - xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb - xrc;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb + xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb - xrc;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb - xrc
            </td>
        </tr>
    </table>
    <p>When the vector elements are 16-bit, it is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="D32ACC.2C_Q16ACC"> D32ACC, Q16ACC </span></h2>
    <p><code>D32ACC xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p><code>Q16ACC xra, xrb, xrc, xrd, addsub, swizzle</code>
    </p>
    <p>Performs addition and/or subtraction on vectors <code>xrb</code> and <code>xrc</code> and adds the results to vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">mode = AA:
            </td>
            <td style="padding: 0 1em">xra += xrb + xrc;
            </td>
            <td style="padding: 0 1em">xrd += xrb + xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">mode = AS:
            </td>
            <td style="padding: 0 1em">xra += xrb + xrc;
            </td>
            <td style="padding: 0 1em">xrd += xrb - xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">mode = SA:
            </td>
            <td style="padding: 0 1em">xra += xrb - xrc;
            </td>
            <td style="padding: 0 1em">xrd += xrb + xrc
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">mode = SS:
            </td>
            <td style="padding: 0 1em">xra += xrb - xrc;
            </td>
            <td style="padding: 0 1em">xrd += xrb - xrc
            </td>
        </tr>
    </table>
    <p>When the vector elements are 16-bit, it is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="Q8ADD"> Q8ADD </span></h2>
    <p><code>Q8ADD xra, xrb, xrc, addsub</code>
    </p>
    <p>Adds or subtracts the four 8-bit values in the vectors <code>xrb</code> and <code>xrc</code>. The four 8-bit results are stored in the vector <code>xra</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= xrb.l - xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= xrb.l - xrc.l
            </td>
        </tr>
    </table>
    <h2> <span class="mw-headline" id="Q8ADDE"> Q8ADDE </span></h2>
    <p><code>Q8ADDE xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p>Adds or subtracts the four 8-bit unsigned values in the vectors <code>xrb</code> and <code>xrc</code>. The four 16-bit results are stored in the vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb.l - xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra&nbsp;:= xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xrb.l - xrc.l
            </td>
        </tr>
    </table>
    <h2> <span class="mw-headline" id="Q8ACCE"> Q8ACCE </span></h2>
    <p><code>Q8ACCE xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p>Adds or subtracts the four 8-bit unsigned values in the vectors <code>xrb</code> and <code>xrc</code>. The four 16-bit results are added to the vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra += xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra += xrb.h + xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l - xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra += xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l + xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra += xrb.h - xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l - xrc.l
            </td>
        </tr>
    </table>
    <h2> <span class="mw-headline" id="D16AVG.2C_Q8AVG"> D16AVG, Q8AVG </span></h2>
    <p><code>D16AVG xra, xrb, xrc</code>
    </p>
    <p><code>Q8AVG xra, xrb, xrc</code>
    </p>
    <p>Computes the average, rounded down, of the unsigned values in vectors <code>xrb</code> and <code>xrc</code> and assigns the result to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="D16AVGR.2C_Q8AVGR"> D16AVGR, Q8AVGR </span></h2>
    <p><code>D16AVGR xra, xrb, xrc</code>
    </p>
    <p><code>Q8AVGR xra, xrb, xrc</code>
    </p>
    <p>Computes the average, rounded up, of the unsigned values in vectors <code>xrb</code> and <code>xrc</code> and assigns the result to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="Q8SAD"> Q8SAD </span></h2>
    <p><code>Q8SAD xra, xrb, xrc, xrd</code>
    </p>
    <p>Computes the absolute difference of the unsigned values in vectors <code>xrb</code> and <code>xrc</code>. The sum of these 4 differences is assigned to the full register <code>xra</code> and added to the full register <code>xrd</code>.
    </p>
    <h1> <span class="mw-headline" id="Multiply_Instructions"> Multiply Instructions </span></h1>
    <h2> <span class="mw-headline" id="D16MUL.2C_Q8MUL"> D16MUL, Q8MUL </span></h2>
    <p><code>D16MUL xra, xrb, xrc, xrd, swizzle</code>
    </p>
    <p><code>Q8MUL xra, xrb, xrc, xrd</code>
    </p>
    <p>Multiplies the signed values in vector <code>xrb</code> by the signed values in vector <code>xrc</code> and assigns the results to vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>When the vector elements are 16-bit, it is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="D16MAC.2C_Q8MAC"> D16MAC, Q8MAC </span></h2>
    <p><code>D16MAC xra, xrb, xrc, xrd, addsub, swizzle</code>
    </p>
    <p><code>Q8MAC xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p>Multiplies the signed values in vector <code>xrb</code> by the signed values in vector <code>xrc</code> and adds or subtracts the results to vectors <code>xra</code> and <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra += xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra += xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd -= xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra -= xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd += xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra -= xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd -= xrb.l * xrc.l
            </td>
        </tr>
    </table>
    <p>When the vector elements are 16-bit, it is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="D16MADL.2C_Q8MADL"> D16MADL, Q8MADL </span></h2>
    <p><code>D16MADL xra, xrb, xrc, xrd, addsub, swizzle</code>
    </p>
    <p><code>Q8MADL xra, xrb, xrc, xrd, addsub</code>
    </p>
    <p>Multiplies the signed values in vector <code>xrb</code> by the signed values in vector <code>xrc</code>. The results of the multiplication are added or subtracted from the values in vector <code>xra</code> and that final result is written to vector <code>xrd</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xrd.h&nbsp;:= xra.h + xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd.l&nbsp;:= xra.l + xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xrd.h&nbsp;:= xra.h + xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd.l&nbsp;:= xra.l - xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xrd.h&nbsp;:= xra.h - xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd.l&nbsp;:= xra.l + xrb.l * xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xrd.h&nbsp;:= xra.h - xrb.h * xrc.h;
            </td>
            <td style="padding: 0 1em">xrd.l&nbsp;:= xra.l - xrb.l * xrc.l
            </td>
        </tr>
    </table>
    <p>When the vector elements are 16-bit, it is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="D16MULF"> D16MULF </span></h2>
    <p><code>D16MULF xra, xrb, xrc, swizzle</code>
    </p>
    <p>Multiplies the signed values in vector <code>xrb</code> by the signed values in vector <code>xrc</code>. The highest 16 bits of the results of the multiplication are written to vector <code>xra</code>. Note that the result of multiplying two 16-bit signed numbers is a 31-bit signed number (bit 30 being the sign bit), so vector <code>xra</code> will contain bits 30..15 of the two multiplication results, not bits 31..16.
    </p>
    <p>It is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="D16MACF"> D16MACF </span></h2>
    <p><code>D16MACF xra, xrb, xrc, xrd, addsub, swizzle</code>
    </p>
    <p>Multiplies the signed values in vector <code>xrb</code> by the signed values in vector <code>xrc</code>. These results are doubled to make two 32-bit signed numbers. Those numbers are then added to or subtracted from vector <code>xra</code> and <code>xrd</code>. The upper 16 bits of those numbers, rounded up, are written to vector <code>xra</code>.
    </p>
    <p>Whether the values are added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = AA:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= ceil((xra + xrb.h * xrc.h * 2) / 2^16);
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= ceil((xrd + xrb.l * xrc.l * 2) / 2^16)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = AS:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= ceil((xra + xrb.h * xrc.h * 2) / 2^16);
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= ceil((xrd - xrb.l * xrc.l * 2) / 2^16)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SA:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= ceil((xra - xrb.h * xrc.h * 2) / 2^16);
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= ceil((xrd + xrb.l * xrc.l * 2) / 2^16)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = SS:
            </td>
            <td style="padding: 0 1em">xra.h&nbsp;:= ceil((xra - xrb.h * xrc.h * 2) / 2^16);
            </td>
            <td style="padding: 0 1em">xra.l&nbsp;:= ceil((xrd - xrb.l * xrc.l * 2) / 2^16)
            </td>
        </tr>
    </table>
    <p>It is possible to swizzle the values read from vector <code>xrb</code> as follows:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">swizzle = WW:
            </td>
            <td style="padding: 0 1em">xrb.hl
            </td>
            <td style="padding: 0 1em">(as-is)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = XW:
            </td>
            <td style="padding: 0 1em">xrb.lh
            </td>
            <td style="padding: 0 1em">(exchanged)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = HW:
            </td>
            <td style="padding: 0 1em">xrb.hh
            </td>
            <td style="padding: 0 1em">(clone high)
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">swizzle = LW:
            </td>
            <td style="padding: 0 1em">xrb.ll
            </td>
            <td style="padding: 0 1em">(clone low)
            </td>
        </tr>
    </table>
    <p>The values read from vector <code>xrc</code> are always used as-is.
    </p>
    <h2> <span class="mw-headline" id="S16MAD"> S16MAD </span></h2>
    <p><code>S16MAD xra, xrb, xrc, xrd, addsub, select</code>
    </p>
    <p>Multiplies a 16-bit signed value from vector <code>xrb</code> with a 16-bit signed value from vector <code>xrc</code>. The result is added to or subtracted from <code>xra</code> and the final result is written to <code>xrd</code>.
    </p>
    <p>Whether the multiplication result is added or subtracted is controlled by <code>addsub</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">addsub = A:
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xra + x * y
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">addsub = S:
            </td>
            <td style="padding: 0 1em">xrd&nbsp;:= xra - x * y
            </td>
        </tr>
    </table>
    <p>Which parts of <code>xrb</code> and <code>xrc</code> are used is controlled by <code>select</code>, as shown in the following table:
    </p>
    <table>
        <tr>
            <td style="padding: 0 1em">select = HH:
            </td>
            <td style="padding: 0 1em">x&nbsp;:= xrb.h;
            </td>
            <td style="padding: 0 1em">y&nbsp;:= xrc.h
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">select = HL:
            </td>
            <td style="padding: 0 1em">x&nbsp;:= xrb.h;
            </td>
            <td style="padding: 0 1em">y&nbsp;:= xrc.l
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">select = LH:
            </td>
            <td style="padding: 0 1em">x&nbsp;:= xrb.l;
            </td>
            <td style="padding: 0 1em">y&nbsp;:= xrc.h
            </td>
        </tr>
        <tr>
            <td style="padding: 0 1em">select = LL:
            </td>
            <td style="padding: 0 1em">x&nbsp;:= xrb.l;
            </td>
            <td style="padding: 0 1em">y&nbsp;:= xrc.l
            </td>
        </tr>
    </table>
    <h1> <span class="mw-headline" id="Other_Math"> Other Math </span></h1>
    <h2> <span class="mw-headline" id="S32MAX.2C_D16MAX.2C_Q8MAX"> S32MAX, D16MAX, Q8MAX </span></h2>
    <p><code>S32MAX xra, xrb, xrc</code>
    </p>
    <p><code>D16MAX xra, xrb, xrc</code>
    </p>
    <p><code>Q8MAX xra, xrb, xrc</code>
    </p>
    <p>Takes the maximum of the signed values of vector <code>xrb</code> and vector <code>xrc</code> and assigns those to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="S32MIN.2C_D16MIN.2C_Q8MIN"> S32MIN, D16MIN, Q8MIN </span></h2>
    <p><code>S32MIN xra, xrb, xrc</code>
    </p>
    <p><code>D16MIN xra, xrb, xrc</code>
    </p>
    <p><code>Q8MIN xra, xrb, xrc</code>
    </p>
    <p>Takes the minimum of the signed values of vector <code>xrb</code> and vector <code>xrc</code> and assigns those to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="Q16SAT"> Q16SAT </span></h2>
    <p><code>Q16SAT xra, xrb, xrc</code>
    </p>
    <p>Saturate: The values in <code>xrb</code> and <code>xrc</code> are taken as four 16-bit signed integers and clamped to the range [0..255]. The result is written to <code>xra</code>, with from high to low: upper half of <code>xrb</code>, lower half of <code>xrb</code>, upper half of <code>xrc</code>, lower half of <code>xrc</code>.
    </p>
    <h2> <span class="mw-headline" id="S32CPS.2C_D16CPS"> S32CPS, D16CPS </span></h2>
    <p><code>S32CPS xra, xrb, xrc</code>
    </p>
    <p><code>D16CPS xra, xrb, xrc</code>
    </p>
    <p>Copy Sign: For each signed value in vector <code>xrc</code>: If it is non-negative signed value, assign the corresponding value from vector <code>xrb</code>, unmodified, to vector <code>xra</code>. Otherwise, assign the corresponding value from vector <code>xrb</code>, negated, to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="Q8ABD"> Q8ABD </span></h2>
    <p><code>Q8ABD xra, xrb, xrc</code>
    </p>
    <p>Absolute difference: Computes the absolute value of the difference of the unsigned values in vector <code>xrb</code> and vector <code>xrc</code> and assigns the result to vector <code>xra</code>.
    </p>
    <h2> <span class="mw-headline" id="Q8SLT"> Q8SLT </span></h2>
    <p><code>Q8SLT xra, xrb, xrc</code>
    </p>
    <p>Set on Less Than: Compares the signed values in vector <code>xrb</code> and vector <code>xrc</code>. If the value from <code>xrb</code> is less than the value from <code>xrc</code>, 1 is assigned to the corresponding position in vector <code>xra</code>, otherwise 0 is assigned.
    </p>
    <p>This is a vectorized version of the MIPS instruction <code>SLT</code>.
    </p>
    <h1> <span class="mw-headline" id="Shift_and_Shuffle_Instructions"> Shift and Shuffle Instructions </span></h1>
    <h2> <span class="mw-headline" id="D32SLL"> D32SLL </span></h2>
    <p><code>D32SLL xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Logical Left: The value of <code>xrb</code> is shifted <code>S</code> bits to the left and the result is assigned to <code>xra</code>. Also, the value of <code>xrc</code> is shifted <code>S</code> bits to the left and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..31].
    </p>
    <h2> <span class="mw-headline" id="D32SLLV"> D32SLLV </span></h2>
    <p><code>D32SLLV xra, xrb, rs</code>
    </p>
    <p>Shift Logical Left: The value of <code>xra</code> is shifted <code>S</code> bits to the left and the result is assigned to <code>xra</code>. Also, the value of <code>xrb</code> is shifted <code>S</code> bits to the left and the result is assigned to <code>xrb</code>. <code>S</code> is [0..31]: the value of the lowest 5 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="D32SLR"> D32SLR </span></h2>
    <p><code>D32SLR xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Logical Right: The unsigned value of <code>xrb</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the unsigned value of <code>xrc</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..31].
    </p>
    <h2> <span class="mw-headline" id="D32SLRV"> D32SLRV </span></h2>
    <p><code>D32SLRV xra, xrb, rs</code>
    </p>
    <p>Shift Logical Right: The unsigned value of <code>xra</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the unsigned value of <code>xrb</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xrb</code>. <code>S</code> is [0..31]: the value of the lowest 5 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="D32SAR"> D32SAR </span></h2>
    <p><code>D32SAR xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Arithmetic Right: The signed value of <code>xrb</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the signed value of <code>xrc</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..31].
    </p>
    <h2> <span class="mw-headline" id="D32SARV"> D32SARV </span></h2>
    <p><code>D32SARV xra, xrb, rs</code>
    </p>
    <p>Shift Arithmetic Right: The signed value of <code>xra</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the signed value of <code>xrb</code> is shifted <code>S</code> bits to the right and the result is assigned to <code>xrb</code>. <code>S</code> is [0..31]: the value of the lowest 5 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="D32SARL"> D32SARL </span></h2>
    <p><code>D32SARL xra, xrb, xrc, S</code>
    </p>
    <p>Shift Arithmetic Right: The signed value of <code>xrb</code> is shifted <code>S</code> bits to the right and the lower 16 bits of the result are assigned to the higher 16 bits of <code>xra</code>. Also, the signed value of <code>xrc</code> is shifted <code>S</code> bits to the right and the lower 16 bits of the result are assigned to the lower 16 bits of <code>xra</code>. S is a constant in the range [0..31].
    </p>
    <h2> <span class="mw-headline" id="D32SARW"> D32SARW </span></h2>
    <p><code>D32SARW xra, xrb, xrc, rs</code>
    </p>
    <p>Shift Arithmetic Right: The signed value of <code>xrb</code> is shifted <code>S</code> bits to the right and the lower 16 bits of the result are assigned to the higher 16 bits of <code>xra</code>. Also, the signed value of <code>xrc</code> is shifted <code>S</code> bits to the right and the lower 16 bits of the result are assigned to the lower 16 bits of <code>xra</code>. <code>S</code> is [0..31]: the value of the lowest 5 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="Q16SLL"> Q16SLL </span></h2>
    <p><code>Q16SLL xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Logical Left: The values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the left and the result is assigned to <code>xra</code>. Also, the values of the upper and lower halves of <code>xrc</code> are shifted <code>S</code> bits to the left and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..15].
    </p>
    <h2> <span class="mw-headline" id="Q16SLLV"> Q16SLLV </span></h2>
    <p><code>Q16SLLV xra, xrb, rs</code>
    </p>
    <p>Shift Logical Left: The values of the upper and lower halves of <code>xra</code> are shifted <code>S</code> bits to the left and the result is assigned to <code>xra</code>. Also, the values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the left and the result is assigned to <code>xrb</code>. <code>S</code> is [0..15]: the value of the lowest 4 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="Q16SLR"> Q16SLR </span></h2>
    <p><code>Q16SLR xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Logical Right: The unsigned values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the unsigned values of the upper and lower halves of <code>xrc</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..15].
    </p>
    <h2> <span class="mw-headline" id="Q16SLRV"> Q16SLRV </span></h2>
    <p><code>Q16SLRV xra, xrb, rs</code>
    </p>
    <p>Shift Logical Right: The unsigned values of the upper and lower halves of <code>xra</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the unsigned values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xrb</code>. <code>S</code> is [0..15]: the value of the lowest 4 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="Q16SAR"> Q16SAR </span></h2>
    <p><code>Q16SAR xra, xrb, xrc, xrd, S</code>
    </p>
    <p>Shift Arithmetic Right: The signed values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the signed values of the upper and lower halves of <code>xrc</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xrd</code>. <code>S</code> is a constant in the range [0..15].
    </p>
    <h2> <span class="mw-headline" id="Q16SARV"> Q16SARV </span></h2>
    <p><code>Q16SARV xra, xrb, rs</code>
    </p>
    <p>Shift Arithmetic Right: The signed values of the upper and lower halves of <code>xra</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xra</code>. Also, the signed values of the upper and lower halves of <code>xrb</code> are shifted <code>S</code> bits to the right and the result is assigned to <code>xrb</code>. <code>S</code> is [0..15]: the value of the lowest 4 bits of main MIPS register <code>rs</code>.
    </p>
    <h2> <span class="mw-headline" id="S32ALN"> S32ALN </span></h2>
    <p><code>S32ALN xra, xrb, xrc, s</code>
    </p>
    <p>Takes the value of <code>xrb:xrc</code>, shifts it <code>s</code> bytes (0..4) to the left and assigns the highest 32 bits of the result to <code>xra</code>. Can be used to realign values that are not aligned in memory.
    </p>
    <h2> <span class="mw-headline" id="S32SFL"> S32SFL </span></h2>
    <p><code>S32SFL xra, xrb, xrc, xrd, ptn</code>
    </p>
    <p>Shuffles (swizzles) the bytes of <code>xrb</code> and <code>xrc</code> as indicated in the table below and writes the result into <code>xra</code> and <code>xrd</code>.
    </p>
    <table>
        <tr>
            <th>Input
            </th>
            <th colspan="4">xrb
            </th>
            <th colspan="4">xrc
            </th>
        </tr>
        <tr>
            <td>
            </td>
            <td style="background:#C0FFC0">b3
            </td>
            <td style="background:#D0FFD0">b2
            </td>
            <td style="background:#E0FFE0">b1
            </td>
            <td style="background:#F0FFF0">b0
            </td>
            <td style="background:#C0C0FF">c3
            </td>
            <td style="background:#D0D0FF">c2
            </td>
            <td style="background:#E0E0FF">c1
            </td>
            <td style="background:#F0F0FF">c0
            </td>
        </tr>
        <tr>
            <th>Output
            </th>
            <th colspan="4">xra
            </th>
            <th colspan="4">xrd
            </th>
        </tr>
        <tr>
            <td>ptn=0
            </td>
            <td style="background:#C0FFC0">b3
            </td>
            <td style="background:#C0C0FF">c3
            </td>
            <td style="background:#D0FFD0">b2
            </td>
            <td style="background:#D0D0FF">c2
            </td>
            <td style="background:#E0FFE0">b1
            </td>
            <td style="background:#E0E0FF">c1
            </td>
            <td style="background:#F0FFF0">b0
            </td>
            <td style="background:#F0F0FF">c0
            </td>
        </tr>
        <tr>
            <td>ptn=1
            </td>
            <td style="background:#C0FFC0">b3
            </td>
            <td style="background:#E0FFE0">b1
            </td>
            <td style="background:#C0C0FF">c3
            </td>
            <td style="background:#E0E0FF">c1
            </td>
            <td style="background:#D0FFD0">b2
            </td>
            <td style="background:#F0FFF0">b0
            </td>
            <td style="background:#D0D0FF">c2
            </td>
            <td style="background:#F0F0FF">c0
            </td>
        </tr>
        <tr>
            <td>ptn=2
            </td>
            <td style="background:#C0FFC0">b3
            </td>
            <td style="background:#C0C0FF">c3
            </td>
            <td style="background:#E0FFE0">b1
            </td>
            <td style="background:#E0E0FF">c1
            </td>
            <td style="background:#D0FFD0">b2
            </td>
            <td style="background:#D0D0FF">c2
            </td>
            <td style="background:#F0FFF0">b0
            </td>
            <td style="background:#F0F0FF">c0
            </td>
        </tr>
        <tr>
            <td>ptn=3
            </td>
            <td style="background:#C0FFC0">b3
            </td>
            <td style="background:#D0FFD0">b2
            </td>
            <td style="background:#C0C0FF">c3
            </td>
            <td style="background:#D0D0FF">c2
            </td>
            <td style="background:#E0FFE0">b1
            </td>
            <td style="background:#F0FFF0">b0
            </td>
            <td style="background:#E0E0FF">c1
            </td>
            <td style="background:#F0F0FF">c0
            </td>
        </tr>
    </table>
    <h1> <span class="mw-headline" id="New_instructions_in_JZ4770"> New instructions in JZ4770 </span></h1>
    <p>The JZ4770 has a quite a few additional MXU instructions. Ingenic writes 3 or 7 to register xr16 to activate these. This may imply that there are two levels of extension between JZ4740 and JZ4770.
    </p>
    <h2> <span class="mw-headline" id="Load_and_store_instructions_2"> Load and store instructions </span></h2>
    <ul>
        <li> <code>LXB rb, rc, strd2</code>
        </li>
        <li> <code>LXBU rb, rc, strd2</code>
        </li>
        <li> <code>LXH rb, rc, strd2</code>
        </li>
        <li> <code>LXHU rb, rc, strd2</code>
        </li>
        <li> <code>LXW rb, rc, strd2</code>
        </li>
        <li> <code>S16LDD xra, rb, s10, optn2</code>
        </li>
        <li> <code>S16LDI xra, rb, s10, optn2</code>
        </li>
        <li> <code>S16SDI xra, rb, s10, optn2</code>
        </li>
        <li> <code>S16STD xra, rb, s10, optn2</code>
        </li>
        <li> <code>S32LDDR xra, rb, s12</code>
        </li>
        <li> <code>S32LDDVR xra, rb, rc, strd2</code>
        </li>
        <li> <code>S32LDIR xra, rb, s12</code>
        </li>
        <li> <code>S32LDIVR xra, rb, rc, strd2</code>
        </li>
        <li> <code>S32SDIR xra, rb, s12</code>
        </li>
        <li> <code>S32SDIVR xra, rb, rc, strd2</code>
        </li>
        <li> <code>S32STDR xra, rb, s12</code>
        </li>
        <li> <code>S32STDVR xra, rb, rc, strd2</code>
        </li>
        <li> <code>S8LDD xra, rb, s8, optn3</code>
        </li>
        <li> <code>S8LDI xra, rb, s8, optn3</code>
        </li>
        <li> <code>S8SDI xra, rb, s8, optn3</code>
        </li>
        <li> <code>S8STD xra, rb, s8, optn3</code>
        </li>
    </ul>
    <h2> <span class="mw-headline" id="Other_math_2"> Other math </span></h2>
    <ul>
        <li> <code>D16MOVN xra, xrb, xrc</code>
        </li>
        <li> <code>D16MOVZ xra, xrb, xrc</code>
        </li>
        <li> <code>D16SLT xra, xrb, xrc</code>
        </li>
        <li> <code>Q16SCOP xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>Q8MOVN xra, xrb, xrc</code>
        </li>
        <li> <code>Q8MOVZ xra, xrb, xrc</code>
        </li>
        <li> <code>Q8SLTU xra, xrb, xrc</code>
        </li>
        <li> <code>S32ABS xra, xrb</code>
        </li>
        <li> <code>S32ALNI xra, xrb, xrc, optn3</code>
        </li>
        <li> <code>S32EXTRV xra, xrd, rs, rt</code>
        </li>
        <li> <code>S32EXTR xra, xrd, rs, bits5</code>
        </li>
        <li> <code>S32LUI xra, s8, optn2</code>
        </li>
        <li> <code>S32MOVN xra, xrb, xrc</code>
        </li>
        <li> <code>S32MOVZ xra, xrb, xrc</code>
        </li>
        <li> <code>S32SLT xra, xrb, xrc</code>
        </li>
    </ul>
    <h2> <span class="mw-headline" id="Addition_and_subtraction_instructions_2"> Addition and subtraction instructions </span></h2>
    <ul>
        <li> <code>D16ASUM xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>D32ACCM xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>D32ADDC xra, xrb, xrc</code>
        </li>
        <li> <code>D32ASUM xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>Q16ACCM xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>Q16ASUM xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>S32MSUBU xra, xrd, rs, rt</code>
        </li>
        <li> <code>S32MSUB xra, xrd, rs, rt</code>
        </li>
    </ul>
    <h2> <span class="mw-headline" id="Multiply_instructions_2"> Multiply instructions </span></h2>
    <ul>
        <li> <code>D16MACE xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>D16MULE xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>D8SUMC xra, xrb, xrc</code>
        </li>
        <li> <code>D8SUM xra, xrb, xrc</code>
        </li>
        <li> <code>Q8MULSU xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>Q8MACSU xra, xrb, xrc, xrd</code>
        </li>
        <li> <code>S32MADDU xra, xrd, rs, rt</code>
        </li>
        <li> <code>S32MADD xra, xrd, rs, rt</code>
        </li>
        <li> <code>S32MULU xra, xrd, rs, rt</code>
        </li>
        <li> <code>S32MUL xra, xrd, rs, rt</code>
        </li>
    </ul>
    <h2> <span class="mw-headline" id="Bitwise_instructions"> Bitwise instructions </span></h2>
    <ul>
        <li> <code>S32AND xra, xrb, xrc</code>
        </li>
        <li> <code>S32NOR xra, xrb, xrc</code>
        </li>
        <li> <code>S32OR xra, xrb, xrc</code>
        </li>
        <li> <code>S32XOR xra, xrb, xrc</code>
        </li>
    </ul>



</body>
<html>