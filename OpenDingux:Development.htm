<!doctype html>
<html>

<head>
    <title>OpenDingux:Development</title>
</head>

<body>
    <p>This page highlights some differences between OpenDingux and the legacy system (booboo's 2.6.24.3 kernel and accompanying rootfs).
    </p>
    <p>Be sure to check the <a href="/index.php?title=Dingux:OpenDingux:Development:FAQ" title="Dingux:OpenDingux:Development:FAQ">OpenDingux Development FAQ</a>.
    </p>
    <p><br />
    </p>
    <table id="toc" class="toc">
        <tr>
            <td>
                <div id="toctitle">
                    <h2>Contents</h2>
                </div>
                <ul>
                    <li class="toclevel-1 tocsection-1"><a href="#Video"><span class="tocnumber">1</span> <span class="toctext">Video</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-2"><a href="#Frame_Buffer"><span class="tocnumber">1.1</span> <span class="toctext">Frame Buffer</span></a></li>
                            <li class="toclevel-2 tocsection-3"><a href="#LCD_Backlight"><span class="tocnumber">1.2</span> <span class="toctext">LCD Backlight</span></a></li>
                            <li class="toclevel-2 tocsection-4"><a href="#Display_Blanking"><span class="tocnumber">1.3</span> <span class="toctext">Display Blanking</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-5"><a href="#Audio"><span class="tocnumber">2</span> <span class="toctext">Audio</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-6"><a href="#ALSA_driver"><span class="tocnumber">2.1</span> <span class="toctext">ALSA driver</span></a></li>
                            <li class="toclevel-2 tocsection-7"><a href="#libAO"><span class="tocnumber">2.2</span> <span class="toctext">libAO</span></a></li>
                            <li class="toclevel-2 tocsection-8"><a href="#Sound_volume"><span class="tocnumber">2.3</span> <span class="toctext">Sound volume</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-9"><a href="#Input"><span class="tocnumber">3</span> <span class="toctext">Input</span></a></li>
                    <li class="toclevel-1 tocsection-10"><a href="#CPU_Frequency_Control"><span class="tocnumber">4</span> <span class="toctext">CPU Frequency Control</span></a></li>
                    <li class="toclevel-1 tocsection-11"><a href="#Power"><span class="tocnumber">5</span> <span class="toctext">Power</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-12"><a href="#Battery"><span class="tocnumber">5.1</span> <span class="toctext">Battery</span></a></li>
                            <li class="toclevel-2 tocsection-13"><a href="#Power_consumption_measurements"><span class="tocnumber">5.2</span> <span class="toctext">Power consumption measurements</span></a>
                                <ul>
                                    <li class="toclevel-3 tocsection-14"><a href="#Before_loading_the_kernel"><span class="tocnumber">5.2.1</span> <span class="toctext">Before loading the kernel</span></a></li>
                                    <li class="toclevel-3 tocsection-15"><a href="#OpenDingux_started"><span class="tocnumber">5.2.2</span> <span class="toctext">OpenDingux started</span></a></li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-16"><a href="#Building_OpenDingux_from_sources"><span class="tocnumber">6</span> <span class="toctext">Building OpenDingux from sources</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-17"><a href="#Kernel"><span class="tocnumber">6.1</span> <span class="toctext">Kernel</span></a></li>
                            <li class="toclevel-2 tocsection-18"><a href="#Root_file_system"><span class="tocnumber">6.2</span> <span class="toctext">Root file system</span></a></li>
                        </ul>
                    </li>
                    <li class="toclevel-1 tocsection-19"><a href="#Development_in_OpenDingux_-_Hello_World.21"><span class="tocnumber">7</span> <span class="toctext">Development in OpenDingux - Hello World!</span></a>
                        <ul>
                            <li class="toclevel-2 tocsection-20"><a href="#Installing_the_toolchain"><span class="tocnumber">7.1</span> <span class="toctext">Installing the toolchain</span></a></li>
                            <li class="toclevel-2 tocsection-21"><a href="#Testing_the_toolchain"><span class="tocnumber">7.2</span> <span class="toctext">Testing the toolchain</span></a></li>
                        </ul>
                    </li>
                </ul>
            </td>
        </tr>
    </table>
    <script>
        if (window.showTocToggle) {
            var tocShowText = "show";
            var tocHideText = "hide";
            showTocToggle();
        }
    </script>
    <h1> <span class="mw-headline" id="Video"> Video </span></h1>
    <h2> <span class="mw-headline" id="Frame_Buffer"> Frame Buffer </span></h2>
    <p>When setting a video mode, the legacy kernel will accept any requested resolution and color depth but regardless of what was asked it will return a 320x240x16bpp mode. This would break SDL's automatic color depth conversion since SDL would think no conversion was necessary. Elta's rootfs patches SDL to work around this issue. In OpenDingux, requests to the kernel for modes other than 320x240x16bpp will fail. If you're using SDL, you can ask SDL for 320x240x8bpp and SDL will automatically do the colorspace conversion for you. If you ask for a resolution other than 320x240, both the kernel and SDL will deny that request.
    </p>
    <p>SDL has three surface modes:
    </p>
    <ul>
        <li> software surface: SDL_SWSURFACE
        </li>
        <li> hardware surface with single buffering: SDL_HWSURFACE
        </li>
        <li> hardware surface with double buffering: SDL_HWSURFACE | SDL_DOUBLEBUF
        </li>
    </ul>
    <p>These modes are selected by passing the mentioned flags to SDL_SetVideoMode().
    </p>
    <p>In the legacy kernel, software surface and hardware surface with single buffering work. However, single buffering means that any pixel drawn can immediately end up on the screen even if the current frame is not finished yet. As a result, any graphics that are painted in layers will end up flickering badly. This can be seen in the optional info bar at the top of the screen in psx4all, for example. Double buffering in the legacy kernel is broken so badly it will likely crash or hang the application that tries to use it.
    </p>
    <p>In OpenDingux, all three modes work. Currently the page flip of double buffering is not properly synchronized yet, so there can be glitches, but they are relatively rare. Hardware surface with double buffering is the preferred mode since it has lower overhead than the software surface: one less buffer in memory and one less buffer to copy each frame, and does not suffer from the tearing and layer paint issues of the single buffered hardware surface.
    </p>
    <p>If you want to access the frame buffer directly, make sure you always lock the surface before using the "pixels" pointer in the SDL_Surface struct. Also make sure you end a frame by calling SDL_Flip(), since that works for both software and hardware surfaces, while SDL_UpdateRect() only works for software surfaces.
    </p>
    <p>Here is some stripped down example code:
    </p>
    <pre>
SDL_Surface *surface = SDL_SetVideoMode(320, 240, 16, SDL_HWSURFACE | SDL_DOUBLEBUF);
if (!surface) {
    // ...error handling...
}

// ...other initialization code...

while (running) {

    // ...stuff to do every frame...

    if (SDL_MUSTLOCK(surface)) SDL_LockSurface(surface);

    // ...access frame buffer directly through surface-&gt;pixels...

    if (SDL_MUSTLOCK(surface)) SDL_UnlockSurface(surface);
    SDL_Flip(surface);
}
</pre>
    <h2> <span class="mw-headline" id="LCD_Backlight"> LCD Backlight </span></h2>
    <p>The intensity of the backlight can be controlled through sysfs:
    </p>
    <pre>
# echo 120 &gt; /sys/class/backlight/pwm-backlight/brightness
</pre>
    <p>From the same <code>brightness</code> file you can also read the current value. The minimum brightness is 0 (off), the maximum can be read from the <code>max_brightness</code> file. The maximum is 255 under OpenDingux, but it's more portable to read it from the file.
    </p>
    <p>The user can control the backlight intensity at all times via the power slider daemon (power + left/right), so there is no real need to have a backlight control in applications as well.
    </p>
    <h2> <span class="mw-headline" id="Display_Blanking"> Display Blanking </span></h2>
    <p>You can turn off the display by writing the string "1" to the <code>blank</code> file in sysfs:
    </p>
    <pre>
# echo 1 &gt; /sys/class/graphics/fb0/blank
</pre>
    <p>To turn the display back on, write "0" to the same file.
    </p>
    <p>Blanking not only turns off the backlight, it also powers down the LCD controller and suspends frame uploads to the LCD controller.
    </p>
    <h1> <span class="mw-headline" id="Audio"> Audio </span></h1>
    <h2> <span class="mw-headline" id="ALSA_driver"> ALSA driver </span></h2>
    <p>The OpenDingux kernel features a totally new sound driver compared to previous kernels. While those ones did use OSS, OpenDingux has now an <a href="http://www.alsa-project.org" class="external text" rel="nofollow">ALSA</a> driver. That new driver has been merged on the mainline linux kernel. The rootfs also packs the user-space ALSA library, with a default config, that could be modified to add funny stuff like an equalizer or surround sound. As the integrated SDL library has been compiled to use ALSA, all the programs which are using SDL for sound should work just fine on OpenDingux, provided they have been dynamically linked.
    </p>
    <h2> <span class="mw-headline" id="libAO"> libAO </span></h2>
    <p>Some programs however do use OSS directly. Those will need to be modified. As the ALSA interface is quite different to the OSS one, a new sound library has been included, <a href="http://www.xiph.org/ao/" class="external text" rel="nofollow">libAO</a>. It is really trivial to use and to make a OSS-only program work with ALSA this way. Click <a href="/index.php?title=Dingux:OpenDingux:Development:FAQ#How_to_port_applications_which_use_OSS_for_the_sound.3F" title="Dingux:OpenDingux:Development:FAQ">here</a> for an example that explains how to use it.
    </p>
    <h2> <span class="mw-headline" id="Sound_volume"> Sound volume </span></h2>
    <p>On OpenDingux there is no way for the applications to change the sound volume themselves. It has been disabled on purpose. Instead, the global shortcuts for the volume should be used.
    </p>
    <h1> <span class="mw-headline" id="Input"> Input </span></h1>
    <p>Some applications were reading <b>/dev/mem</b> directly to retrieve the state of the dingoo buttons. To avoid conflicts between the kernel and user space applications accessing the same hardware, <b>/dev/mem</b> has been disabled. The applications should use instead either SDL key events, or use the standard linux way of reading the keys: <b>/dev/event0</b>.
    </p>
    <p>The kernel header &lt;linux/input.h&gt; contains constants named KEY_* with the numbers used to identify keys in input events.
    </p>
    <p>Here is the key mappping for OpenDingux:
    </p>
    <table>
        <tr>
            <td width="100">D-pad up</td>
            <td>KEY_UP</td>
        </tr>
        <tr>
            <td width="100">D-pad down</td>
            <td>KEY_DOWN</td>
        </tr>
        <tr>
            <td width="100">D-pad left</td>
            <td>KEY_LEFT</td>
        </tr>
        <tr>
            <td width="100">D-pad right</td>
            <td>KEY_RIGHT</td>
        </tr>
        <tr>
            <td width="100">A button</td>
            <td>KEY_LEFTCTRL</td>
        </tr>
        <tr>
            <td width="100">B button</td>
            <td>KEY_LEFTALT</td>
        </tr>
        <tr>
            <td width="100">X button</td>
            <td>KEY_SPACE</td>
        </tr>
        <tr>
            <td width="100">Y button</td>
            <td>KEY_LEFTSHIFT</td>
        </tr>
        <tr>
            <td width="100">Left shoulder</td>
            <td>KEY_TAB</td>
        </tr>
        <tr>
            <td width="100">Right shoulder</td>
            <td>KEY_BACKSPACE</td>
        </tr>
        <tr>
            <td width="100">START button</td>
            <td>KEY_ENTER</td>
        </tr>
        <tr>
            <td width="100">SELECT button</td>
            <td>KEY_ESC</td>
        </tr>
        <tr>
            <td width="100">Power slider</td>
            <td>KEY_POWER</td>
        </tr>
        <tr>
            <td width="100">Power hold</td>
            <td>KEY_PAUSE</td>
        </tr>
    </table>
    <p>Note that putting the power slider in hold position is a key down event and taking it out of the hold position is a key release event; this is different from a PC pause key where you'd do press+release to pause and press+release again to unpause.
    </p>
    <p>Also see <a href="http://code.google.com/p/dingoo-sdk/wiki/DingooSDL" class="external free" rel="nofollow">http://code.google.com/p/dingoo-sdk/wiki/DingooSDL</a> (whilst it is for the Native OS, the SDL information is the same). Also see <a href="http://code.google.com/p/dingoo-sdk/source/browse/trunk/dingoo_sdk/samples/sdl_hello_world" class="external free" rel="nofollow">http://code.google.com/p/dingoo-sdk/source/browse/trunk/dingoo_sdk/samples/sdl_hello_world</a> for an example that also works with OpenDingux
    </p>
    <h1> <span class="mw-headline" id="CPU_Frequency_Control"> CPU Frequency Control </span></h1>
    <p>The sysfs pseudo-files /sys/devices/system/cpu/cpu0/cpufreq/* control the PLL frequency through the cpufreq driver.
    </p>
    <h1> <span class="mw-headline" id="Power"> Power </span></h1>
    <h2> <span class="mw-headline" id="Battery"> Battery </span></h2>
    <p>You can read the battery status from the following file:
    </p>
    <pre>
/sys/class/power_supply/battery/capacity
</pre>
    <p>It contains a percentage: 0 is empty and 100 is full. This percentage is a best effort, but it is not very accurate.
    </p>
    <h2> <span class="mw-headline" id="Power_consumption_measurements"> Power consumption measurements </span></h2>
    <h3> <span class="mw-headline" id="Before_loading_the_kernel"> Before loading the kernel </span></h3>
    <p>55mA = usb boot mode (B pressed during power on) <br /> 150mA = hwinit screen
    </p>
    <h3> <span class="mw-headline" id="OpenDingux_started"> OpenDingux started </span></h3>
    <p>48mA = idle, 34MHz, brightness=0, ILI off <br /> 66mA = idle, 34MHz, brightness=0 <br /> 88mA = idle, 34MHz, brightness=100 <br /> 126mA = idle, 34MHz, brightness=255
    </p>
    <p>68mA = idle, 408MHz, brightness=0, ILI off <br /> 88mA = idle, 408MHz, brightness=0 <br /> 110mA = idle, 408MHz, brightness=100 <br /> 147mA = idle, 408MHz, brightness=255
    </p>
    <p>80mA = heavy load, 34MHz, brightness=0, ILI off <br /> 87mA = heavy load, 34MHz, brightness=0 <br /> 110mA = heavy load, 34MHz, brightness=100 <br /> 148mA = heavy load, 34MHz, brightness=255
    </p>
    <p>171mA = heavy load, 408MHz, brightness=0, ILI off <br /> 179mA = heavy load, 408MHz, brightness=0 <br /> 190mA = heavy load, 408MHz, brightness=100 <br /> 220mA = heavy load, 408MHz, brightness=255
    </p>
    <p>9mA = suspend mode
    </p>
    <h1> <span class="mw-headline" id="Building_OpenDingux_from_sources"> Building OpenDingux from sources </span></h1>
    <h2> <span class="mw-headline" id="Kernel"> Kernel </span></h2>
    <p>The basic steps:
    </p>
    <pre>
$ git clone git://projects.qi-hardware.com/qi-kernel.git
$ cd qi-kernel
$ git checkout jz-3.3
$ make ARCH=mips a320_defconfig
$ make ARCH=mips vmlinuz.bin
</pre>
    <p>At the time of writing, Linux 3.3 is the most recent kernel, thus the branch named "jz-3.3" is selected in this example. Please adjust it yourself for newer kernel versions. You can use the command "git branch" to see all branches.
    </p>
    <p>If your Dingoo does not have an ILI9331 LCD controller, you have to update the configuration between building <code>a320_defconfig</code> and <code>vmlinuz.bin</code>.
    </p>
    <h2> <span class="mw-headline" id="Root_file_system"> Root file system </span></h2>
    <p>The basic steps:
    </p>
    <pre>
$ git clone git://github.com/mthuurne/opendingux-buildroot.git
$ cd opendingux-buildroot
$ make a320_defconfig
$ make
</pre>
    <p>If you have a multi-core CPU and would like to speed up the build, don't pass "-j" to Make, but instead set the <code>BR2_JLEVEL</code> environment variable. For example: <code>export BR2_JLEVEL=4</code>; this instructs buildroot to perform 4 jobs in parallel.
    </p>
    <p>The skeleton for the root file system is in <code>target/device/opendingux/a320/target_skeleton/</code>. There you can edit the default configuration files or add scripts. After you make your changes, copy the new files to output/target and run <code>make</code> to generate a new rootfs image.
    </p>
    <p>To add a package, first make sure the package is available in buildroot. If a package is not available yet, read <code>docs/buildroot.html</code> for instructions on how to add a package. Then run <code>make menuconfig</code> to enable the package and just <code>make</code> to build it and generate a new rootfs image.
    </p>
    <h1> <span class="mw-headline" id="Development_in_OpenDingux_-_Hello_World.21"> Development in OpenDingux - Hello World! </span></h1>
    <h2> <span class="mw-headline" id="Installing_the_toolchain"> Installing the toolchain </span></h2>
    <p>All the steps described below can be done in user interface with equivalent results.
    </p>
    <p>Take the last available toolchain in <a href="http://www.treewalker.org/opendingux/" class="external text" rel="nofollow">OpenDingux page</a> and decompress it:
    </p>
    <pre>
tar -xvf opendingux-toolchain.2012-06-16.tar.bz2
</pre>
    <p>Copy the extracted folder in /opt:
    </p>
    <pre>
sudo cp -a opendingux-toolchain /opt
</pre>
    <p>Add the toolchain to your PATH (For always have the toolchain available in your PATH, you can edit your ~/.bashrc and put the command below inside the file):
    </p>
    <pre>
export PATH=&quot;${PATH}:/opt/opendingux-toolchain/usr/bin&quot;
</pre>
    <h2> <span class="mw-headline" id="Testing_the_toolchain"> Testing the toolchain </span></h2>
    <p>A very simple program is showed below to illustrate how we can make software for OpenDingux:
    </p>
    <pre>
#include&lt;stdio.h&gt;
#include&lt;unistd.h&gt;

int main()
{
    printf(&quot;Testing OpenDingux!\n&quot;);
    printf(&quot;Waiting 5 seconds...\n&quot;);
    sleep(5);
    return 0;
}
</pre>
    <p>Save the program with filename that you want. In this example the filename will be test_od.c. For compile this source code:
    </p>
    <pre>
mipsel-linux-gcc test_od.c -o test_od.dge
</pre>
    <p>OBS: Usually, OpenDingux programs have .dge as extension.
    </p>
    <p>After compile the program, we can put this executable in our SD card. We can do this with telnet, or ftp.
    </p>
    <p><br />
        <b>We can test this programs in two ways:</b>
    </p>
    <p><br />
        <b>telnet</b>
    </p>
    <p>Connect with telnet in your dingoo, find your executable and execute(in this example ./test_od.dge).
    </p>
    <p><br />
        <b>Directly in OpenDingux</b>
    </p>
    <p>In OpenDingux, go to the Application session, and press Select -&gt; Add link in applications.
    </p>
    <p>So, find your executable and press A. It will create a shortcut to execute your program in the Application session.
    </p>
    <p>Press Select -&gt; Edit test_od.dge and change Display Console to ON.
    </p>
    <p>Now just press A in the shortcut and it will show our message!
    </p>


</body>
<html>